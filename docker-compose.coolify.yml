# Docker Compose especÃ­fico para Coolify
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agro-conecta-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: agro_conecta
      POSTGRES_USER: agro_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agro_password_default}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres 
      -c listen_addresses='*'
      -c max_connections=100
      -c shared_buffers=128MB
    networks:
      - agro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agro_user -d agro_conecta"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.coolify
    container_name: agro-conecta-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      FRONTEND_URL: ${FRONTEND_URL:-https://agroconecta.conext.click}
      DATABASE_URL: postgresql://agro_user:${POSTGRES_PASSWORD:-agro_password_default}@postgres:5432/agro_conecta
      JWT_SECRET: ${JWT_SECRET:-default-jwt-secret-change-in-production}
      ASAAS_API_KEY: ${ASAAS_API_KEY}
      ASAAS_ENVIRONMENT: ${ASAAS_ENVIRONMENT:-sandbox}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://agroconecta.conext.click,https://www.agroconecta.conext.click}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.coolify
      args:
        VITE_API_URL: ${VITE_API_URL:-https://api.agroconecta.conext.click/api}
    environment:
      VITE_API_URL: ${VITE_API_URL:-https://api.agroconecta.conext.click/api}
    container_name: agro-conecta-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - agro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  agro-network:
    driver: bridge
